Student Name #1: TODO:Ying Jing
Student ugrad login #1: TODO:t2e0b

Student Name #2: TODO:XiuYuan Lu
Student ugrad login #2: TODO:w0e0b

Team name (for fun!): TODO:LJ

Acknowledgment that you understand and have followed the course's
collaboration policy
(http://www.ugrad.cs.ubc.ca/~cs221/current/syllabus.shtml#conduct):

TODO: [[Put your names here again as a signature]荆莹，Xiuyuan Lu]

TODO: submit using: make handin-proj1

----------------------------------------------------------------------

Approximate hours on project: TODO: 19h

----------------------------------------------------------------------

For teams, rough breakdown of work: TODO: half-half

----------------------------------------------------------------------

Acknowledgment of assistance: TODO: stackoverflow, google, TA 

----------------------------------------------------------------------

Questions:

For the explanations, generally a sentence or two should be enough.
Type your answers directly in this file.


1.  Edit solve.cpp to use either of your queue classes to solve Mazes
1, 2, 3, and 4.  Set a large enough delay in the solveMaze function
(like 200000) to watch what's happening.  Do you see why this is called
breadth-first search (BFS)?  How many steps long were your solutions?
How does this compare with DFS?

TODO:
It is called breadth-first search because it searches the all the neighbor nodes first before it goes to next level (so the search is very wide). 
e.g. In the beginning of maze 1, BFS tries all possible three trials at meantime, but DFS tries one trail first, when it meets impasse, it goes back to the previous position which has other trails to go.

BFS
ArrayQueue: Maze 1 - 58 steps, Maze 2 - 14 steps, Maze 3 - 5 steps, Maze 4 - 90 steps
LinkedListQueue: Maze 1 - 58 steps, Maze 2 - 14 steps, Maze 3 - 5 steps, Maze 4 - 90 steps

DFS
ArrayStack: Maze 1 - 58 steps, Maze 2 - 46 steps, Maze 3 - 247 steps, Maze 4 - 110 steps
LinkedListStack: Maze 1 - 58 steps, Maze 2 - 46 steps, Maze 3 - 247 steps, Maze 4 - 110 steps

The solution steps for BFS is less than the solution steps for DFS in general.


2.  Try to solve the blank Sudoku board using your ArrayQueue
and LinkedListQueue classes.  What happens?  Why?

TODO:
Both are very slow to find a solution. Since both ArrayQueue and LinkedListQueue belong to BFS search strategy which it tries all results available starting from where those first moves end.

3.  Switch to the medium-difficulty Sudoku problem, and comment
out the delay and the print statements in the solveMaze function.
How long does it take to solve the puzzle using your ArrayQueue
class?  Using your LinkedListQueue class?  Is the difference big?

TODO:
ArrayQueue:
11m59.685s, 50 steps

LinkedListQueue:
12m0.445s, 50 steps

Just small difference, since both of them are using same search strategy. 

4.  Edit solve.cpp to switch to the 4x4 and then 5x5 slider puzzles.
Make sure to comment out the delay and print statements in the solveMaze
function. How long does it take to solve these puzzles with your
HeapPriorityQueue versus my UnsortedPriorityQueue?  For most students,
mine will be faster?  Why might that happen?  Are the asymptotic
runtimes for the heap versus the unsorted array wrong?

TODO:
4x4 slider puzzle:
UnsortedPriorityQueue:
0m10.749s, 180 steps
HeapPriorityQueue:
0m14.101s, 224 steps

5x5 slider puzzles:
UnsortedPriorityQueue:
3m56.002s, 396 steps
HeapPriorityQueue:
11m42.158s, 628 steps

UnsortedPriorityQueue: add: O(1) remove:O(n)
HeapPriorityQueue: add & remove: O(lg(n))
When considering the big-O runtime, HeapPriorityQueue O(lg(n)) should be faster. However, we ignore the real number of the constant and the coefficient when we talk the big-O runtime. In fact, lg(n) can probably be larger than n when n is not enough large to approach the asymptotic.
The asymptotic runtimes for the heap versus the unsorted array are still correct.

----------------------------------------------------------------------

We will be checking your implementations of ArrayQueue, LinkedListQueue,
and HeapPriorityQueue.
